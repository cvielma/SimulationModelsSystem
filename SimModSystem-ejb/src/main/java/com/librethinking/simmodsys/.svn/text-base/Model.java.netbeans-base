/**
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.librethinking.simmodsys;

import java.util.Collection;

/**
 * Model is the main unit of the system. It represents an executable simulation
 * or mathematical model. It is composed by States that saves the value of its parameters
 * along its life cycle. 
 * 
 * @author cvielma
 */
public interface Model {
    
    
    /** This method executes the Model until a final State is reached */
    public void execute();
    
    /** This method tells if the Model was already executed or not (a Model
     * might not be able to execute again)
     */
    public boolean wasExecuted();
    
    /** This method obtains the first State established for the model.
     * If no State has been set, this will return null.
     */
    public State getInitialState();
    
    /** This method sets the initial State of the model.
     * It can return runtime exceptions as result of the operation. */
    public void setInitialState(State st);
    
    /** This method obtains the last (final) State established for the model, if
     * any. If no final state is set, this will return null.*/
    public State getFinalState();
    
    /** This method sets the final State for the model. It should remove the last
     * State in the model (if there's one) and change it for this new State.
     * It can return runtime exceptions as result of the operation.
     */
    public void setFinalState(State st);
    
    
    /** This method sets a Collection of States to the Model. The first state will
     * be the initial, and the last will be the final. 
     * It can return runtime exceptions depending on the result.
     */
    public void setStates(Collection<State> sts);
    
    /** This method returns all the States associated to the model. The first one
     * (if any) will be the initial state, and the last one will be the final.
     * It can return null.
     */
    public Collection<State> getStates();
    
    /** This method adds States to the model. The State added will be now the final
     * State for the model. 
     * It can return runtime exceptions.
     */
    public void addState(State st);
    
    /** This method sets the User that is executing the model in order to review 
     * its permissions (when used to save models).
     * It can return runtime exceptions.
     */
    public void setUser(User u);
    
    /** This method gets the User associated to the Model, if any.
     * It can return null.
     */
    public User getUser();
    
    
    
    
    
}
