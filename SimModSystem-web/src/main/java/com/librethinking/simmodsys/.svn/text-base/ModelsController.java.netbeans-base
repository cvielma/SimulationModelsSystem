/*
 * Copyright 2012 Christian Vielma <cvielma@librethinking.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.librethinking.simmodsys;

import com.librethinking.simmodsys.ejb.ClientSupportBean;
import com.librethinking.simmodsys.ejb.ModelBean;
import com.librethinking.simmodsys.exceptions.business.FunctionalException;
import com.librethinking.simmodsys.exceptions.business.TechnicalException;
import com.librethinking.simmodsys.persistence.jpa.hibernate.AdmTypes;
import com.librethinking.simmodsys.persistence.jpa.hibernate.User;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 *
 * @author Christian Vielma <cvielma@librethinking.com>
 */
@WebServlet(name = "ModelsController", urlPatterns = {"/ListModels", "/SaveModel", "/ConfigureModel"})
public class ModelsController extends HttpServlet {
    @EJB
    private ModelBean modelBean;
    @EJB
    private ClientSupportBean clientSupportBean;
      

    /**
     * Processes requests for both HTTP
     * <code>GET</code> and
     * <code>POST</code> methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        switch (request.getServletPath()) {
            case "/ListModels":
                this.listModels(request, response);
                break;
            case "/ConfigureModel":
                this.configureModel(request, response);
                break;
        }
        
        
    }
    
    /** This method list the possible models to be configured.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    private void listModels(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
            try {
                List<AdmTypes> models = clientSupportBean.getActiveTypes("MT%");
                                
                if(models.isEmpty()){
                    request.setAttribute("info", "There are no models available.");                
                }
                else{
                    HttpSession session = request.getSession();
                    session.setAttribute("models", models);                
                }
                request.getRequestDispatcher("Model/listModels.jsp").forward(request, response);
                
                
            } 
            catch (TechnicalException ex){
                request.setAttribute("error", "This is REALLY bad: "+ ex.getMessage());
                request.getRequestDispatcher(request.getContextPath()).forward(request, response);
            }
            catch (Exception ex){
                request.setAttribute("error", "Unexpected error: "+ ex.getMessage());
                request.getRequestDispatcher(request.getContextPath()).forward(request, response);
            }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP
     * <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP
     * <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

    /** This method creates model to be configured by the user
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    private void configureModel(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String type = (String) request.getParameter("modelid");
        if(type==null){
            request.setAttribute("error", "Type selected is null. Please select a valid type.");
            request.getRequestDispatcher("Model/listModels.jsp").forward(request, response);
        }
        else {
            try {
                SIMModel model = modelBean.createModel(type);
                HttpSession session = request.getSession();
                ResourceBundle bundle = ResourceBundle.getBundle(ModelsController.class.getPackage().getName()+".Parameters"); //this.getClass().getPackage().getName()+
                session.setAttribute("configuremodel", model);   
                session.setAttribute("parameterbundle", bundle);
                request.getRequestDispatcher("Model/configureModel.jsp").forward(request, response);
                
            } catch (FunctionalException ex) {
                Logger.getLogger(ModelsController.class.getName()).log(Level.SEVERE, null, ex);
                request.setAttribute("error", "Error selecting model: "+ex.getMessage());
                request.getRequestDispatcher("ListModels").forward(request, response);
            }
            catch (TechnicalException ex) {
                Logger.getLogger(ModelsController.class.getName()).log(Level.SEVERE, null, ex);
                request.setAttribute("error", "This is REALLY bad: "+ ex.getMessage());
                request.getRequestDispatcher("ListModels").forward(request, response);
            }
            catch (Exception ex){
                request.setAttribute("error", "Unexpected error: "+ ex.getMessage());
                request.getRequestDispatcher("ListModels").forward(request, response);
            }
            
        }
    }
}
